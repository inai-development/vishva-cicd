name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/inai-voice-assistant-adi
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .
        
      - name: Push Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/inai-voice-assistant-adi
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}
  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      TESTING: "true"  # ✅ Added this to enable test mode
      DATABASE_URL: "sqlite:///:memory:"  # ✅ Override for testing
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TOGGLE_PASSWORD: ${{ secrets.TOGGLE_PASSWORD }}
      TOGGLE_KEY: ${{ secrets.TOGGLE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 app/ inai_project/ serve.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ inai_project/ serve.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
        
      - name: Run unit tests
        run: PYTHONPATH=$PYTHONPATH pytest tests/ -v

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, test]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1) Write env file (store full KEY=VALUE lines in ENV_FILE secret)
            echo "${{ secrets.ENV_FILE }}" > /home/${{ secrets.EC2_USER }}/inai.env
            # Ensure this line exists in ENV_FILE (or append it here):
            # RDS_CA_CERT=/app/certs/rds-ca.pem
        
            # 2) Download Amazon RDS CA bundle
            curl -fsSL -o /home/${{ secrets.EC2_USER }}/rds-ca.pem https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
        
            # 3) Pull image by commit SHA and restart container
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/inai-voice-assistant-adi
            docker pull $IMAGE:${{ github.sha }}
        
            docker stop inai-app || true
            docker rm inai-app || true
        
            docker run -d --name inai-app -p 8000:8000 \
              --env-file /home/${{ secrets.EC2_USER }}/inai.env \
              -v /home/${{ secrets.EC2_USER }}/rds-ca.pem:/app/certs/rds-ca.pem:ro \
              --restart unless-stopped \
              $IMAGE:${{ github.sha }}
        
            docker image prune -f || true
